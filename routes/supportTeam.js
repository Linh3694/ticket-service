const express = require("express");
const router = express.Router();
const supportTeamController = require("../controllers/supportTeamController");
const { authenticate } = require("../middleware/authMiddleware");

// ‚ö†Ô∏è IMPORTANT: Route Order Matters!
// Routes v·ªõi path c·ª• th·ªÉ PH·∫¢I khai b√°o TR∆Ø·ªöC routes v·ªõi params ƒë·ªông
// N·∫øu kh√¥ng, Express s·∫Ω match /frappe-users v·ªõi /:userId tr∆∞·ªõc
// 
// ‚úÖ CORRECT ORDER:
// 1. Specific paths: /roles, /frappe-users, /by-role/:role
// 2. Dynamic paths: /:userId (GET, PUT, DELETE)

// üìñ PUBLIC Endpoints (No Authentication Required)
// - /roles: Danh s√°ch c√°c role h·ªó tr·ª£
// - /frappe-users: Danh s√°ch t·∫•t c·∫£ user t·ª´ Frappe ƒë·ªÉ ch·ªçn

// L·∫•y danh s√°ch available roles (PUBLIC)
router.get("/roles", supportTeamController.getAvailableRoles);

// L·∫•y danh s√°ch Frappe users (PUBLIC - ƒë·ªÉ searchable combobox)
router.get("/frappe-users", supportTeamController.getFrappeUsers);

// L·∫•y members theo role (AUTHENTICATED)
router.get("/by-role/:role", authenticate, supportTeamController.getMembersByRole);

// L·∫•y t·∫•t c·∫£ team members (AUTHENTICATED)
router.get("/", authenticate, supportTeamController.getAllTeamMembers);

// L·∫•y team member theo userId (AUTHENTICATED)
router.get("/:userId", authenticate, supportTeamController.getTeamMemberById);

// T·∫°o ho·∫∑c c·∫≠p nh·∫≠t team member (AUTHENTICATED)
router.post("/", authenticate, supportTeamController.createOrUpdateTeamMember);

// C·∫≠p nh·∫≠t roles c·ªßa member (AUTHENTICATED)
router.put("/:userId/roles", authenticate, supportTeamController.updateTeamMemberRoles);

// C·∫≠p nh·∫≠t stats c·ªßa member (AUTHENTICATED)
router.put("/:userId/stats", authenticate, supportTeamController.updateMemberStats);

// X√≥a team member (AUTHENTICATED)
router.delete("/:userId", authenticate, supportTeamController.deleteTeamMember);

module.exports = router;

